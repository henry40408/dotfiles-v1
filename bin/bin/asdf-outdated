#!/usr/bin/env python3

import logging
import os
import queue
import re
import subprocess
import sys
import threading
import unittest

from pkg_resources import parse_version
from optparse import OptionParser
from typing import List, Union


class TestCase(unittest.TestCase):
    def test_semver_tmux_version(self):
        v = parse_version('1.0.0')  # semantic version
        self.assertEqual(str(v), '1.0.0')

    def test_parse_tool_versions(self):
        t = parse_tool_versions('bat 1.0.0')
        self.assertEqual(len(t), 1)
        self.assertEqual(t, [('bat', ['1.0.0'])])

        t = parse_tool_versions('bat')
        self.assertEqual(t, [('bat', [])])

    def test_find_closest(self):
        installed = ['1.0.0', '1.5.0', '2.0.0']
        latest = '1.6.0'
        closest = find_closest(installed, latest)
        self.assertEqual(closest, '1.5.0')

    def test_is_valid_version(self):
        self.assertTrue(is_valid_version('1.0.0'))  # semantic version
        self.assertFalse(is_valid_version('1.0.0-dev'))  # ruby
        self.assertFalse(is_valid_version('1.0.0-preview3'))  # ruby
        self.assertFalse(is_valid_version('1.0.0+ent'))  # consul

    def test_find_latest_version(self):
        installed = ['0.5.0', '1.0.0']
        available = ['0.5.0', '1.0.0', '1.0.1', '1.1.0', '2.0.0', '3.0.0']

        v = find_latest_version(installed, available, 'patch')
        self.assertEqual(v, '1.0.1')

        v = find_latest_version(installed, available, 'minor')
        self.assertEqual(v, '1.1.0')

        v = find_latest_version(installed, available, 'major')
        self.assertEqual(v, '3.0.0')


class Colors:
    if os.environ.get('NO_COLOR', False):
        HEADER = ''
        OKBLUE = ''
        OKCYAN = ''
        OKGREEN = ''
        WARNING = ''
        FAIL = ''
        ENDC = ''
        BOLD = ''
        UNDERLINE = ''
    else:
        HEADER = '\033[95m'
        OKBLUE = '\033[94m'
        OKCYAN = '\033[96m'
        OKGREEN = '\033[92m'
        WARNING = '\033[93m'
        FAIL = '\033[91m'
        ENDC = '\033[0m'
        BOLD = '\033[1m'
        UNDERLINE = '\033[4m'


def find_latest_version(installed: List[str], available: List[str],
                        flag: str) -> Union[None, str]:
    if not installed:
        return None

    im = parse_version(installed[0])  # installed max
    for i in installed:
        p = parse_version(i)  # parsed
        if p > im:
            im = p

    latest = im
    for a in available:
        p = parse_version(a)  # parsed
        if p > latest:
            if flag == 'major':
                latest = p
            elif flag == 'minor':
                if p.major == latest.major:
                    latest = p
            else:  # patch
                if p.major == latest.major and p.minor == latest.minor:
                    latest = p

    return str(latest)


def is_valid_version(version: str) -> bool:
    if not version:
        return False
    v = parse_version(version)
    if v.local:  # consul = "+ent"
        return False
    return not v.is_devrelease and not v.is_prerelease and bool(v.release)


def get_available_versions(tool: str):
    sp = subprocess.Popen(['asdf', 'list', 'all', tool],
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE)
    stdout = sp.communicate()[0]
    return [
        line.strip() for line in stdout.decode('utf-8').split('\n')
        if is_valid_version(line.strip())
    ]


def parse_tool_versions(content: str):
    tuples = []
    for line in content.split('\n'):
        splitted = re.split(r'\s+', line.strip())
        tool, versions = splitted[0], splitted[1:]
        tuples.append((tool, versions))
    return tuples


def find_closest(installed: List[str], latest: str) -> Union[None, str]:
    if not installed[0]:
        return None

    p_latest = parse_version(latest)
    p_current = parse_version(installed[0])
    for i in installed:
        p_installed = parse_version(i)
        if p_installed < p_latest and p_installed > p_current:
            p_current = p_installed
    return str(p_current)


def check_version(q: queue.Queue,
                  tool: str,
                  installed: List[str],
                  granularity: str):
    logging.debug(f'check {tool}')

    available = get_available_versions(tool)
    logging.debug(f'{tool}: found {available}')

    if not available:
        print(f'{tool} {Colors.WARNING}no versions found{Colors.ENDC}',
              file=sys.stderr)
        return

    latest_version = find_latest_version(installed, available, granularity)
    if not latest_version:
        print(f'{tool} {Colors.WARNING}no versions found{Colors.ENDC}',
              file=sys.stderr)
        return

    s = f'{tool}'  # message to be printed
    t = f'{tool}'  # new content for .tool-versions
    if latest_version in installed:
        for i in installed:
            if i == latest_version:
                s += f' {Colors.OKGREEN}{i}{Colors.ENDC}'
            else:
                s += f' {i}'
            t += f' {i}'
    else:
        closest = find_closest(installed, latest_version)
        for i in installed:
            if i == closest:
                s += f' {Colors.WARNING}{i}->{latest_version}{Colors.ENDC}'
                t += f' {latest_version}'
            else:
                s += f' {i}'
                t += f' {i}'
    print(s)
    q.put(t)


def main():
    parser = OptionParser()
    parser.add_option('-f',
                      '--file',
                      help='Path of .tool-versions',
                      default=os.path.expanduser('~/.tool-versions'))
    parser.add_option('-g',
                      '--granularity',
                      help='Suggest newer version on major, minor, or patch',
                      default='patch',
                      choices=['patch', 'minor', 'major'])
    parser.add_option('-w',
                      '--write',
                      help='Update .tool-versions with newer versions',
                      action='store_true')
    parser.set_defaults()
    (options, args) = parser.parse_args()

    if os.environ.get('TEST', False):
        unittest.main()
        return

    if os.environ.get('DEBUG', False):
        logging.basicConfig(level=logging.DEBUG)

    with open(options.file) as f:
        tuples = parse_tool_versions(f.read().strip())

    # filter plugins if positional arguments are given
    if args:
        tuples = [t for t in tuples if t[0] in args]

    threads = []

    q = queue.Queue()

    granularity = options.granularity
    for t in tuples:
        tool, versions = t
        args = (q, tool, versions, granularity)
        th = threading.Thread(target=check_version, args=args)
        th.start()
        threads.append(th)

    for t in threads:
        t.join()

    if options.write:
        with open(options.file, 'w') as f:
            f.write('\n'.join(sorted([q.get() for t in tuples])))


if __name__ == '__main__':
    main()
