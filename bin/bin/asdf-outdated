#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require_relative 'asdf-lib'

ignore_patterns = {
  'consul' => ->(v) { v.include?('-rc') },
  'python' => ->(v){ %w[a b rc].any?{ |w| v.include?(w) } },
  'golang' => ->(v){ %w[beta rc].any?{ |w| v.include?(w) } },
  'kubectl' => ->(v){ v.include?('rc') },
  'tmux' => ->(v){ v.include?('rc') },
}

options = {}
OptionParser.new do |opts|
  opts.on('-v', '--verbose', 'Verbose')
  opts.on('-h', '--help', 'Help') do |_h|
    puts opts
    exit
  end
end.parse!(into: options)

tool_versions = read_tool_versions

filtered_argv = ARGV.map(&:strip)
if filtered_argv.size > 0
  tool_versions = tool_versions.select{ |(p, _vs)| filtered_argv.include?(p) }
end

threads = []
tool_versions.each do |(plugin, versions)|
  threads << Thread.new do
    puts "==> [-] checking #{plugin}" if options[:verbose]

    newer_versions = IO.popen("asdf list all #{plugin}")
      .read.lines.map(&:strip)
      .select{ |v| Gem::Version.correct?(v) }
      .reject{ |v| %w[-dev -alpha -beta].any?{ |w| v.include?(w) } }

    ignore_pattern = ignore_patterns[plugin]
    if !ignore_pattern.nil?
      newer_versions = newer_versions.reject{ |v| ignore_pattern.(v) }
    end

    latest_version = newer_versions.last
    colorized = if latest_version.nil?
      "no latest version".gray
    elsif versions.include?(latest_version)
      "up-to-date".green
    else
      "#{latest_version} <- #{versions.join(', ')}".red
    end

    result = "#{plugin}: #{colorized}"
    puts "==> [v] done checking #{plugin}" if options[:verbose]
    result
  end
end

threads.map(&:join).each do |t|
  puts t.value
end
